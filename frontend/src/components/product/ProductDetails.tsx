import {WineInfo} from "../../clients/types/WineInfo";

interface ProductDetailsProps {
  wine: WineInfo | null;
}

// Since the lot code and description are displayed separately, we define this type to only include
// the other miscellaneous properties that should be displayed by this component.
type WineInfoDetails = Omit<WineInfo, "lotCode" | "description">;

export function ProductDetails(props: ProductDetailsProps) {
    // This is a fun one, if any of the keys in WineInfoDetails change, the component will break
    // until the keys are updated here.
    const detailKeys: (keyof WineInfoDetails)[] = [
        "volume", "tankCode", "productState", "owner"
    ];

    const {wine} = props;

    // aria-description is actually a valid aria attribute, React is implementing it next version.
    //
    // See more:
    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-description
    // https://github.com/facebook/react/pull/22142
    return wine !== null ? <table className="details" aria-description="This table provides basic details of the displayed product">
        <tbody>
            {
                detailKeys.map(key =>
                    wine[key] !== null && <tr key={`detail-${key}`}>
                        <th scope="row">{camelCaseToTitleCase(key)}</th>
                        <td>{wine[key]}</td>
                    </tr>)
            }
        </tbody>
    </table> : null;
}

// Generated by Github Copilot! (It's quite good.)
// While this method is fun, in reality we'd be using localised strings.
function camelCaseToTitleCase(str: string) {
    return str.replace(/([A-Z])/g, ' $1')
              .replace(/^./, function(str) { return str.toUpperCase(); });
}